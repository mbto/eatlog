/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.eatlog.common.model.eatlog.tables.records;


import com.github.mbto.eatlog.common.model.eatlog.tables.Store;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreRecord extends UpdatableRecordImpl<StoreRecord> implements Record4<UInteger, LocalDateTime, UInteger, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>eatlog.store.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>eatlog.store.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>eatlog.store.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>eatlog.store.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>eatlog.store.account_id</code>.
     */
    public void setAccountId(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>eatlog.store.account_id</code>.
     */
    @NotNull
    public UInteger getAccountId() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>eatlog.store.title</code>.
     */
    public void setTitle(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>eatlog.store.title</code>.
     */
    @NotNull
    @Size(max = 32)
    public String getTitle() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, LocalDateTime, UInteger, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UInteger, LocalDateTime, UInteger, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Store.STORE.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Store.STORE.UPDATED_AT;
    }

    @Override
    public Field<UInteger> field3() {
        return Store.STORE.ACCOUNT_ID;
    }

    @Override
    public Field<String> field4() {
        return Store.STORE.TITLE;
    }

    @Override
    public UInteger component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getUpdatedAt();
    }

    @Override
    public UInteger component3() {
        return getAccountId();
    }

    @Override
    public String component4() {
        return getTitle();
    }

    @Override
    public UInteger value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getUpdatedAt();
    }

    @Override
    public UInteger value3() {
        return getAccountId();
    }

    @Override
    public String value4() {
        return getTitle();
    }

    @Override
    public StoreRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    @Override
    public StoreRecord value2(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public StoreRecord value3(UInteger value) {
        setAccountId(value);
        return this;
    }

    @Override
    public StoreRecord value4(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public StoreRecord values(UInteger value1, LocalDateTime value2, UInteger value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StoreRecord
     */
    public StoreRecord() {
        super(Store.STORE);
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    public StoreRecord(UInteger id, LocalDateTime updatedAt, UInteger accountId, String title) {
        super(Store.STORE);

        setId(id);
        setUpdatedAt(updatedAt);
        setAccountId(accountId);
        setTitle(title);
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    public StoreRecord(com.github.mbto.eatlog.common.model.eatlog.tables.pojos.Store value) {
        super(Store.STORE);

        if (value != null) {
            setId(value.getId());
            setUpdatedAt(value.getUpdatedAt());
            setAccountId(value.getAccountId());
            setTitle(value.getTitle());
        }
    }
}
