/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.eatlog.common.model.eatlog.tables;


import com.github.mbto.eatlog.common.model.eatlog.Eatlog;
import com.github.mbto.eatlog.common.model.eatlog.Indexes;
import com.github.mbto.eatlog.common.model.eatlog.Keys;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.AccountRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.TreeSet;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.jackson.extensions.converters.JSONtoJacksonConverter;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>eatlog.account</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>eatlog.account.id</code>.
     */
    public final TableField<AccountRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>eatlog.account.created_at</code>.
     */
    public final TableField<AccountRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>eatlog.account.lastauth_at</code>.
     */
    public final TableField<AccountRecord, LocalDateTime> LASTAUTH_AT = createField(DSL.name("lastauth_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>eatlog.account.name</code>.
     */
    public final TableField<AccountRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>eatlog.account.google_sub</code>.
     */
    public final TableField<AccountRecord, String> GOOGLE_SUB = createField(DSL.name("google_sub"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>eatlog.account.google_picture_url</code>.
     */
    public final TableField<AccountRecord, String> GOOGLE_PICTURE_URL = createField(DSL.name("google_picture_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>eatlog.account.locale_segments</code>. Example value:
     * 'ru' or 'en' or 'en_US' or others languages with/without country
     */
    public final TableField<AccountRecord, String> LOCALE_SEGMENTS = createField(DSL.name("locale_segments"), SQLDataType.VARCHAR(15).nullable(false).defaultValue(DSL.inline("ru", SQLDataType.VARCHAR)), this, "Example value: 'ru' or 'en' or 'en_US' or others languages with/without country");

    /**
     * The column <code>eatlog.account.roles</code>.
     */
    public final TableField<AccountRecord, TreeSet<String>> ROLES = createField(DSL.name("roles"), SQLDataType.JSON, this, "", new JSONtoJacksonConverter<TreeSet<String>>((Class<TreeSet<String>>) (Class) TreeSet.class));

    /**
     * The column <code>eatlog.account.geoname_id</code>.
     */
    public final TableField<AccountRecord, UInteger> GEONAME_ID = createField(DSL.name("geoname_id"), SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>eatlog.account.is_banned</code>.
     */
    public final TableField<AccountRecord, Boolean> IS_BANNED = createField(DSL.name("is_banned"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>eatlog.account.banned_reason</code>.
     */
    public final TableField<AccountRecord, String> BANNED_REASON = createField(DSL.name("banned_reason"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>eatlog.account.grade_eatlog</code>.
     */
    public final TableField<AccountRecord, UShort> GRADE_EATLOG = createField(DSL.name("grade_eatlog"), SQLDataType.SMALLINTUNSIGNED, this, "");

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>eatlog.account</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>eatlog.account</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    /**
     * Create a <code>eatlog.account</code> table reference
     */
    public Account() {
        this(DSL.name("account"), null);
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Eatlog.EATLOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACCOUNT_CREATED_AT, Indexes.ACCOUNT_GEONAME_ID, Indexes.ACCOUNT_LASTAUTH_AT);
    }

    @Override
    public Identity<AccountRecord, UInteger> getIdentity() {
        return (Identity<AccountRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ACCOUNT_GOOGLE_SUB);
    }

    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    @Override
    public Account as(Table<?> alias) {
        return new Account(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Table<?> name) {
        return new Account(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UInteger, LocalDateTime, LocalDateTime, String, String, String, String, TreeSet<String>, UInteger, Boolean, String, UShort> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super UInteger, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super TreeSet<String>, ? super UInteger, ? super Boolean, ? super String, ? super UShort, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super UInteger, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super TreeSet<String>, ? super UInteger, ? super Boolean, ? super String, ? super UShort, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
