/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.eatlog.common.model.eatlog.tables.records;


import com.github.mbto.eatlog.common.model.eatlog.tables.Consumed;

import jakarta.validation.constraints.NotNull;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConsumedRecord extends UpdatableRecordImpl<ConsumedRecord> implements Record4<UInteger, LocalDate, UInteger, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>eatlog.consumed.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>eatlog.consumed.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>eatlog.consumed.date</code>.
     */
    public void setDate(LocalDate value) {
        set(1, value);
    }

    /**
     * Getter for <code>eatlog.consumed.date</code>.
     */
    @NotNull
    public LocalDate getDate() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for <code>eatlog.consumed.product_id</code>.
     */
    public void setProductId(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>eatlog.consumed.product_id</code>.
     */
    @NotNull
    public UInteger getProductId() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>eatlog.consumed.gram</code>.
     */
    public void setGram(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>eatlog.consumed.gram</code>.
     */
    @NotNull
    public Short getGram() {
        return (Short) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, LocalDate, UInteger, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UInteger, LocalDate, UInteger, Short> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Consumed.CONSUMED.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return Consumed.CONSUMED.DATE;
    }

    @Override
    public Field<UInteger> field3() {
        return Consumed.CONSUMED.PRODUCT_ID;
    }

    @Override
    public Field<Short> field4() {
        return Consumed.CONSUMED.GRAM;
    }

    @Override
    public UInteger component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getDate();
    }

    @Override
    public UInteger component3() {
        return getProductId();
    }

    @Override
    public Short component4() {
        return getGram();
    }

    @Override
    public UInteger value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getDate();
    }

    @Override
    public UInteger value3() {
        return getProductId();
    }

    @Override
    public Short value4() {
        return getGram();
    }

    @Override
    public ConsumedRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    @Override
    public ConsumedRecord value2(LocalDate value) {
        setDate(value);
        return this;
    }

    @Override
    public ConsumedRecord value3(UInteger value) {
        setProductId(value);
        return this;
    }

    @Override
    public ConsumedRecord value4(Short value) {
        setGram(value);
        return this;
    }

    @Override
    public ConsumedRecord values(UInteger value1, LocalDate value2, UInteger value3, Short value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConsumedRecord
     */
    public ConsumedRecord() {
        super(Consumed.CONSUMED);
    }

    /**
     * Create a detached, initialised ConsumedRecord
     */
    public ConsumedRecord(UInteger id, LocalDate date, UInteger productId, Short gram) {
        super(Consumed.CONSUMED);

        setId(id);
        setDate(date);
        setProductId(productId);
        setGram(gram);
    }

    /**
     * Create a detached, initialised ConsumedRecord
     */
    public ConsumedRecord(com.github.mbto.eatlog.common.model.eatlog.tables.pojos.Consumed value) {
        super(Consumed.CONSUMED);

        if (value != null) {
            setId(value.getId());
            setDate(value.getDate());
            setProductId(value.getProductId());
            setGram(value.getGram());
        }
    }
}
