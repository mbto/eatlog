/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.eatlog.common.model.eatlog.tables.records;


import com.github.mbto.eatlog.common.model.eatlog.tables.Weight;

import jakarta.validation.constraints.NotNull;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WeightRecord extends UpdatableRecordImpl<WeightRecord> implements Record4<UInteger, LocalDate, UInteger, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>eatlog.weight.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>eatlog.weight.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>eatlog.weight.date</code>.
     */
    public void setDate(LocalDate value) {
        set(1, value);
    }

    /**
     * Getter for <code>eatlog.weight.date</code>.
     */
    @NotNull
    public LocalDate getDate() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for <code>eatlog.weight.account_id</code>.
     */
    public void setAccountId(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>eatlog.weight.account_id</code>.
     */
    @NotNull
    public UInteger getAccountId() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>eatlog.weight.kilogram</code>.
     */
    public void setKilogram(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>eatlog.weight.kilogram</code>.
     */
    @NotNull
    public BigDecimal getKilogram() {
        return (BigDecimal) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, LocalDate, UInteger, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UInteger, LocalDate, UInteger, BigDecimal> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Weight.WEIGHT.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return Weight.WEIGHT.DATE;
    }

    @Override
    public Field<UInteger> field3() {
        return Weight.WEIGHT.ACCOUNT_ID;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Weight.WEIGHT.KILOGRAM;
    }

    @Override
    public UInteger component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getDate();
    }

    @Override
    public UInteger component3() {
        return getAccountId();
    }

    @Override
    public BigDecimal component4() {
        return getKilogram();
    }

    @Override
    public UInteger value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getDate();
    }

    @Override
    public UInteger value3() {
        return getAccountId();
    }

    @Override
    public BigDecimal value4() {
        return getKilogram();
    }

    @Override
    public WeightRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    @Override
    public WeightRecord value2(LocalDate value) {
        setDate(value);
        return this;
    }

    @Override
    public WeightRecord value3(UInteger value) {
        setAccountId(value);
        return this;
    }

    @Override
    public WeightRecord value4(BigDecimal value) {
        setKilogram(value);
        return this;
    }

    @Override
    public WeightRecord values(UInteger value1, LocalDate value2, UInteger value3, BigDecimal value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WeightRecord
     */
    public WeightRecord() {
        super(Weight.WEIGHT);
    }

    /**
     * Create a detached, initialised WeightRecord
     */
    public WeightRecord(UInteger id, LocalDate date, UInteger accountId, BigDecimal kilogram) {
        super(Weight.WEIGHT);

        setId(id);
        setDate(date);
        setAccountId(accountId);
        setKilogram(kilogram);
    }

    /**
     * Create a detached, initialised WeightRecord
     */
    public WeightRecord(com.github.mbto.eatlog.common.model.eatlog.tables.pojos.Weight value) {
        super(Weight.WEIGHT);

        if (value != null) {
            setId(value.getId());
            setDate(value.getDate());
            setAccountId(value.getAccountId());
            setKilogram(value.getKilogram());
        }
    }
}
