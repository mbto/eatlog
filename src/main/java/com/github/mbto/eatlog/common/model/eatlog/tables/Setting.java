/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.eatlog.common.model.eatlog.tables;


import com.github.mbto.eatlog.common.model.eatlog.Eatlog;
import com.github.mbto.eatlog.common.model.eatlog.Keys;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.SettingRecord;

import java.util.Arrays;
import java.util.List;
import java.util.TreeSet;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.jackson.extensions.converters.JSONtoJacksonConverter;
import org.jooq.types.UInteger;


/**
 * Create OAuth 2.0 client id: https://console.cloud.google.com/apis/credentials
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Setting extends TableImpl<SettingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>eatlog.setting</code>
     */
    public static final Setting SETTING = new Setting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SettingRecord> getRecordType() {
        return SettingRecord.class;
    }

    /**
     * The column <code>eatlog.setting.id</code>.
     */
    public final TableField<SettingRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>eatlog.setting.key</code>.
     */
    public final TableField<SettingRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>eatlog.setting.value</code>. string or json
     */
    public final TableField<SettingRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "string or json");

    /**
     * The column <code>eatlog.setting.roles</code>. json array with roles
     * names, example: ["owner","admin"]
     */
    public final TableField<SettingRecord, TreeSet<String>> ROLES = createField(DSL.name("roles"), SQLDataType.JSON, this, "json array with roles names, example: [\"owner\",\"admin\"]", new JSONtoJacksonConverter<TreeSet<String>>((Class<TreeSet<String>>) (Class) TreeSet.class));

    private Setting(Name alias, Table<SettingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Setting(Name alias, Table<SettingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Create OAuth 2.0 client id: https://console.cloud.google.com/apis/credentials"), TableOptions.table());
    }

    /**
     * Create an aliased <code>eatlog.setting</code> table reference
     */
    public Setting(String alias) {
        this(DSL.name(alias), SETTING);
    }

    /**
     * Create an aliased <code>eatlog.setting</code> table reference
     */
    public Setting(Name alias) {
        this(alias, SETTING);
    }

    /**
     * Create a <code>eatlog.setting</code> table reference
     */
    public Setting() {
        this(DSL.name("setting"), null);
    }

    public <O extends Record> Setting(Table<O> child, ForeignKey<O, SettingRecord> key) {
        super(child, key, SETTING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Eatlog.EATLOG;
    }

    @Override
    public Identity<SettingRecord, UInteger> getIdentity() {
        return (Identity<SettingRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<SettingRecord> getPrimaryKey() {
        return Keys.KEY_SETTING_PRIMARY;
    }

    @Override
    public List<UniqueKey<SettingRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SETTING_KEY);
    }

    @Override
    public Setting as(String alias) {
        return new Setting(DSL.name(alias), this);
    }

    @Override
    public Setting as(Name alias) {
        return new Setting(alias, this);
    }

    @Override
    public Setting as(Table<?> alias) {
        return new Setting(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Setting rename(String name) {
        return new Setting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Setting rename(Name name) {
        return new Setting(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Setting rename(Table<?> name) {
        return new Setting(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, String, String, TreeSet<String>> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UInteger, ? super String, ? super String, ? super TreeSet<String>, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UInteger, ? super String, ? super String, ? super TreeSet<String>, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
