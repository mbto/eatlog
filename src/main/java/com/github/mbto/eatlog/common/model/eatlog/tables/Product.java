/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.eatlog.common.model.eatlog.tables;


import com.github.mbto.eatlog.common.model.eatlog.Eatlog;
import com.github.mbto.eatlog.common.model.eatlog.Keys;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.ProductRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * bju and kkal values: per 100 gram
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Product extends TableImpl<ProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>eatlog.product</code>
     */
    public static final Product PRODUCT = new Product();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductRecord> getRecordType() {
        return ProductRecord.class;
    }

    /**
     * The column <code>eatlog.product.id</code>.
     */
    public final TableField<ProductRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>eatlog.product.store_id</code>.
     */
    public final TableField<ProductRecord, UInteger> STORE_ID = createField(DSL.name("store_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>eatlog.product.title</code>.
     */
    public final TableField<ProductRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>eatlog.product.portion_gram</code>.
     */
    public final TableField<ProductRecord, Short> PORTION_GRAM = createField(DSL.name("portion_gram"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>eatlog.product.b</code>.
     */
    public final TableField<ProductRecord, BigDecimal> B = createField(DSL.name("b"), SQLDataType.DECIMAL(5, 2).nullable(false), this, "");

    /**
     * The column <code>eatlog.product.j</code>.
     */
    public final TableField<ProductRecord, BigDecimal> J = createField(DSL.name("j"), SQLDataType.DECIMAL(5, 2).nullable(false), this, "");

    /**
     * The column <code>eatlog.product.u</code>.
     */
    public final TableField<ProductRecord, BigDecimal> U = createField(DSL.name("u"), SQLDataType.DECIMAL(5, 2).nullable(false), this, "");

    /**
     * The column <code>eatlog.product.b_to_kkal</code>.
     */
    public final TableField<ProductRecord, BigDecimal> B_TO_KKAL = createField(DSL.name("b_to_kkal"), SQLDataType.DECIMAL(6, 2).nullable(false), this, "");

    /**
     * The column <code>eatlog.product.j_to_kkal</code>.
     */
    public final TableField<ProductRecord, BigDecimal> J_TO_KKAL = createField(DSL.name("j_to_kkal"), SQLDataType.DECIMAL(6, 2).nullable(false), this, "");

    /**
     * The column <code>eatlog.product.u_to_kkal</code>.
     */
    public final TableField<ProductRecord, BigDecimal> U_TO_KKAL = createField(DSL.name("u_to_kkal"), SQLDataType.DECIMAL(6, 2).nullable(false), this, "");

    /**
     * The column <code>eatlog.product.kkal</code>.
     */
    public final TableField<ProductRecord, BigDecimal> KKAL = createField(DSL.name("kkal"), SQLDataType.DECIMAL(7, 2).nullable(false), this, "");

    private Product(Name alias, Table<ProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private Product(Name alias, Table<ProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("bju and kkal values: per 100 gram"), TableOptions.table());
    }

    /**
     * Create an aliased <code>eatlog.product</code> table reference
     */
    public Product(String alias) {
        this(DSL.name(alias), PRODUCT);
    }

    /**
     * Create an aliased <code>eatlog.product</code> table reference
     */
    public Product(Name alias) {
        this(alias, PRODUCT);
    }

    /**
     * Create a <code>eatlog.product</code> table reference
     */
    public Product() {
        this(DSL.name("product"), null);
    }

    public <O extends Record> Product(Table<O> child, ForeignKey<O, ProductRecord> key) {
        super(child, key, PRODUCT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Eatlog.EATLOG;
    }

    @Override
    public Identity<ProductRecord, UInteger> getIdentity() {
        return (Identity<ProductRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_PRIMARY;
    }

    @Override
    public List<ForeignKey<ProductRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCT_STORE_STORE_ID_FK);
    }

    private transient Store _store;

    /**
     * Get the implicit join path to the <code>eatlog.store</code> table.
     */
    public Store store() {
        if (_store == null)
            _store = new Store(this, Keys.PRODUCT_STORE_STORE_ID_FK);

        return _store;
    }

    @Override
    public Product as(String alias) {
        return new Product(DSL.name(alias), this);
    }

    @Override
    public Product as(Name alias) {
        return new Product(alias, this);
    }

    @Override
    public Product as(Table<?> alias) {
        return new Product(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(String name) {
        return new Product(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(Name name) {
        return new Product(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(Table<?> name) {
        return new Product(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UInteger, UInteger, String, Short, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super UInteger, ? super UInteger, ? super String, ? super Short, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super UInteger, ? super UInteger, ? super String, ? super Short, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
