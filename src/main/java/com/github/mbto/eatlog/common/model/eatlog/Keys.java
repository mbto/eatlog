/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.eatlog.common.model.eatlog;


import com.github.mbto.eatlog.common.model.eatlog.tables.Account;
import com.github.mbto.eatlog.common.model.eatlog.tables.Consumed;
import com.github.mbto.eatlog.common.model.eatlog.tables.Limitation;
import com.github.mbto.eatlog.common.model.eatlog.tables.Product;
import com.github.mbto.eatlog.common.model.eatlog.tables.Setting;
import com.github.mbto.eatlog.common.model.eatlog.tables.Store;
import com.github.mbto.eatlog.common.model.eatlog.tables.Weight;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.AccountRecord;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.ConsumedRecord;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.LimitationRecord;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.ProductRecord;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.SettingRecord;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.StoreRecord;
import com.github.mbto.eatlog.common.model.eatlog.tables.records.WeightRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * eatlog.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_GOOGLE_SUB = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_google_sub"), new TableField[] { Account.ACCOUNT.GOOGLE_SUB }, true);
    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_PRIMARY"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<ConsumedRecord> KEY_CONSUMED_PRIMARY = Internal.createUniqueKey(Consumed.CONSUMED, DSL.name("KEY_consumed_PRIMARY"), new TableField[] { Consumed.CONSUMED.ID }, true);
    public static final UniqueKey<LimitationRecord> KEY_LIMITATION_PRIMARY = Internal.createUniqueKey(Limitation.LIMITATION, DSL.name("KEY_limitation_PRIMARY"), new TableField[] { Limitation.LIMITATION.ID }, true);
    public static final UniqueKey<ProductRecord> KEY_PRODUCT_PRIMARY = Internal.createUniqueKey(Product.PRODUCT, DSL.name("KEY_product_PRIMARY"), new TableField[] { Product.PRODUCT.ID }, true);
    public static final UniqueKey<SettingRecord> KEY_SETTING_KEY = Internal.createUniqueKey(Setting.SETTING, DSL.name("KEY_setting_key"), new TableField[] { Setting.SETTING.KEY }, true);
    public static final UniqueKey<SettingRecord> KEY_SETTING_PRIMARY = Internal.createUniqueKey(Setting.SETTING, DSL.name("KEY_setting_PRIMARY"), new TableField[] { Setting.SETTING.ID }, true);
    public static final UniqueKey<StoreRecord> KEY_STORE_PRIMARY = Internal.createUniqueKey(Store.STORE, DSL.name("KEY_store_PRIMARY"), new TableField[] { Store.STORE.ID }, true);
    public static final UniqueKey<WeightRecord> KEY_WEIGHT_PRIMARY = Internal.createUniqueKey(Weight.WEIGHT, DSL.name("KEY_weight_PRIMARY"), new TableField[] { Weight.WEIGHT.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ConsumedRecord, ProductRecord> CONSUMED_PRODUCT_PRODUCT_ID_FK = Internal.createForeignKey(Consumed.CONSUMED, DSL.name("consumed_product_product_id_fk"), new TableField[] { Consumed.CONSUMED.PRODUCT_ID }, Keys.KEY_PRODUCT_PRIMARY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<LimitationRecord, AccountRecord> LIMITATION_ACCOUNT_ACCOUNT_ID_FK = Internal.createForeignKey(Limitation.LIMITATION, DSL.name("limitation_account_account_id_fk"), new TableField[] { Limitation.LIMITATION.ACCOUNT_ID }, Keys.KEY_ACCOUNT_PRIMARY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<ProductRecord, StoreRecord> PRODUCT_STORE_STORE_ID_FK = Internal.createForeignKey(Product.PRODUCT, DSL.name("product_store_store_id_fk"), new TableField[] { Product.PRODUCT.STORE_ID }, Keys.KEY_STORE_PRIMARY, new TableField[] { Store.STORE.ID }, true);
    public static final ForeignKey<StoreRecord, AccountRecord> STORE_ACCOUNT_ACCOUNT_ID_FK = Internal.createForeignKey(Store.STORE, DSL.name("store_account_account_id_fk"), new TableField[] { Store.STORE.ACCOUNT_ID }, Keys.KEY_ACCOUNT_PRIMARY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<WeightRecord, AccountRecord> WEIGHT_ACCOUNT_ACCOUNT_ID_FK = Internal.createForeignKey(Weight.WEIGHT, DSL.name("weight_account_account_id_fk"), new TableField[] { Weight.WEIGHT.ACCOUNT_ID }, Keys.KEY_ACCOUNT_PRIMARY, new TableField[] { Account.ACCOUNT.ID }, true);
}
